#!/usr/bin/env bash

# Bash strict mode (prevention)
set -euo pipefail

# Constants

# Script metadata
VERSION=0.0.1
FILENAME=$(basename $0)

DOCKER_IMAGE=busybox:latest

ARG_IMPORT=
ARG_EXPORT=

# Default variables
ARG_INDEX=0
DOCKER_VOLUME=
HOST_DIRECTORY=./
CALL_ID=2
TARBALL_FILENAME=

function print_help() {
    cat <<EOF
$FILENAME

By default this script works with directories,
but supports tarball as well.

Optional arguments
  -h        Show this help message
  -v        Docker volume name
  -d        Host directory path (default is the current directory)
  -i        (boolean) Import the Docker volume from a directory
  -e        (boolean) Export a Docker volume into a directory
  -a        Tarball filename (optional)
EOF
}

function parse() {
    while getopts "w:d:a:v:hie" arg; do
        case $arg in
            v)
                DOCKER_VOLUME=$OPTARG
                ;;
            
            d)
                HOST_DIRECTORY=$OPTARG
                ;;
            
            i)
                CALL_ID=1
                ;;
            
            e)
                CALL_ID=2
                ;;
            
            a)
                TARBALL_FILENAME=$OPTARG
                ARG_INDEX=1
                ;;

            h)
                print_help
                exit 0
                ;;

        esac    
    done

    if [[ -z $DOCKER_VOLUME ]]; then
        echo "You must set a Docker volume"
        return 1
    fi
}

# $1 -> command to exec inside the container
function docker_volume_call() {
    echo $1
    if ! docker run \
        --rm \
        -v "$HOST_DIRECTORY:/host_dir" \
        -v "$DOCKER_VOLUME:/$DOCKER_VOLUME" \
        $DOCKER_IMAGE \
        sh -c "$1";
    then
        echo "Unable to exec the busybox Docker container command"
        return 1
    fi
}

function docker_volume_import() {
    if [[ $TARBALL_FILENAME ]] && ! file "$HOST_DIRECTORY/$TARBALL_FILENAME" \
        | grep -q ".tar.gz: gzip compressed";
    then
        echo "$TARBALL_FILENAME is not a tarball, must be a gzip compressed data"
        return 1
    fi
    
    docker_volume_call "${ARG_IMPORT[$ARG_INDEX]}"
}

function docker_volume_export() {
    docker_volume_call "${ARG_EXPORT[$ARG_INDEX]}"
}

# $1 -> Docker volume name
function docker_volume_check() {
    if docker volume inspect \
        "$1" \
        > /dev/null 2>&1;
    then 
        return 0    
    fi
    
    echo "The Docker volume $1 doesn't exist"
    echo "Creates Docker volume $1"
    
    docker volume create "$1"
}

function _call() {
    local op=

    docker_volume_check "$DOCKER_VOLUME"   

    case $CALL_ID in
        1)
            docker_volume_import
            op="Import"
            ;;
        
        2)
            docker_volume_export
            op="Export"
            ;;
    esac

    echo \
        "[+] $op operations with Docker volume $DOCKER_VOLUME" \
        "and host directory $HOST_DIRECTORY are successfull."
}

function _init() {
    local tar_strip=0

    # Import
    # Check tarball file for the import
    if [[
            $TARBALL_FILENAME \
            && $CALL_ID -eq 1
    ]]; then
        [[ "$(
            tar \
                -tf "$HOST_DIRECTORY/$TARBALL_FILENAME" \
                | head -n 1 \
                | tail -c 2
            )" == "/"
        ]] && tar_strip=1
    fi

    ARG_IMPORT=(
        "cp -rT /host_dir /$DOCKER_VOLUME"
        "tar -xvzf /host_dir/$TARBALL_FILENAME -C /$DOCKER_VOLUME --strip $tar_strip"
    )

    # Export
    ARG_EXPORT=(
        "cp -rT /$DOCKER_VOLUME -t /host_dir"
        "tar -cvzf /host_dir/$TARBALL_FILENAME /$DOCKER_VOLUME"
    )
}

function main() {
    parse $@ || exit 1

    _init
    _call
}

main $@
